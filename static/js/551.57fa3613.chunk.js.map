{"version":3,"file":"static/js/551.57fa3613.chunk.js","mappings":"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","sources":["component/Contact.tsx","contacts/form.tsx","contacts/list.tsx","contacts/model.ts","contacts/validate.ts"],"sourcesContent":["import { orderBy } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport FormContact from \"../contacts/form\";\nimport ContactList from \"../contacts/list\";\nimport { Contact, initialState } from \"../contacts/model\";\nimport \"../primitive.css\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"500px\",\n  },\n};\ninterface Sort {\n  type: \"asc\" | \"desc\";\n  field: string;\n}\n\ninterface Meta {\n  currentPage: number;\n  perPage: number;\n  pageNumbers: number[];\n}\n\nconst PER_PAGE = 5;\n\nconst initialMetaState = (length: number) => {\n  const perPage = PER_PAGE;\n  const pageNumbers = calculatePageNumbers(length);\n  return {\n    currentPage: 1,\n    perPage,\n    pageNumbers,\n  };\n};\n\nconst calculatePageNumbers = (length: number) => {\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(length / PER_PAGE); i++) {\n    pageNumbers.push(i);\n  }\n  return pageNumbers;\n};\n\nconst ContactComponent: React.FC = () => {\n  const data: Contact[] = [\n    { id: 1, name: \"Tania\", email: \"tania@mail.com\", contactNumber: \"123123123\" },\n    { id: 2, name: \"Craig\", email: \"craig@email.com\", contactNumber: \"6546456\" },\n    { id: 3, name: \"Ben1\", email: \"ben1@email.com\", contactNumber: \"2342134\" },\n    { id: 4, name: \"Ben2\", email: \"ben2@email.com\", contactNumber: \"2342234\" },\n    { id: 5, name: \"Ben3\", email: \"ben3@email.com\", contactNumber: \"2342334\" },\n    { id: 6, name: \"Ben4\", email: \"ben4@email.com\", contactNumber: \"2342434\" },\n    { id: 7, name: \"Ben5\", email: \"ben5@email.com\", contactNumber: \"23425 34\" },\n  ];\n\n  const [contacts, setContacts] = useState(data);\n  const [list, setList] = useState(data);\n  const [sort, setSort] = useState<Sort>({ type: \"asc\", field: \"name\" });\n  const [meta, setMeta] = useState<Meta>(initialMetaState(contacts.length));\n  const [showModal, setShowModal] = useState(false);\n\n  const addContact = (contact: Contact) => {\n    contact.id = contacts.length + 1;\n    setContacts(orderBy([...contacts, contact], [sort.field], [sort.type]));\n  };\n\n  const deleteContact = (id?: number) => {\n    setContacts(contacts.filter((contact) => contact.id !== id));\n  };\n\n  const sortContacts = (sort: \"desc\" | \"asc\", field: string) => {\n    const sortedContacts = orderBy(contacts, [field], [sort]); // Use Lodash to sort array by 'name'\n    setContacts(sortedContacts);\n  };\n\n  const [currentContact, setCurrentContact] = useState(initialState);\n\n  const editContact = (contact: Contact) => {\n    setCurrentContact(contact);\n  };\n\n  const updateContact = (id: number, updatedContact: Contact) => {\n    setContacts(contacts.map((contact) => (contact.id === id ? updatedContact : contact)));\n  };\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const mode = currentContact.id === 0 ? \"Add Contact\" : \"Edit Contact\";\n  useEffect(() => {\n    const pageNumbers = calculatePageNumbers(contacts.length);\n    let currentPage = meta.currentPage;\n    if (pageNumbers[pageNumbers.length - 1] < meta.currentPage) {\n      currentPage = pageNumbers[pageNumbers.length - 1];\n    }\n    setMeta({ perPage: PER_PAGE, currentPage, pageNumbers });\n  }, [contacts.length, meta.currentPage]);\n\n  useEffect(() => {\n    const metaPage = meta.currentPage * meta.perPage;\n    const beforePage = (meta.currentPage - 1) * meta.perPage;\n    const indexOfLast = metaPage < contacts.length ? meta.currentPage * meta.perPage : contacts.length;\n    const lastPage = meta.pageNumbers[meta.pageNumbers.length - 1];\n    const indexOfFirst =\n      meta.currentPage === lastPage\n        ? contacts.length - (contacts.length - beforePage)\n        : indexOfLast - meta.perPage;\n    setList(contacts.slice(indexOfFirst, indexOfLast));\n  }, [meta, contacts]);\n\n  return (\n    <div className=\"container\">\n      <h1>Contacts</h1>\n      <div className=\"flex-row\">\n        <Modal isOpen={showModal} style={customStyles} contentLabel={mode}>\n          <h2>{mode}</h2>\n          <FormContact\n            currentContact={currentContact}\n            addContact={addContact}\n            updateContact={updateContact}\n            toggleModal={toggleModal}\n            mode={mode}\n          />\n        </Modal>\n        <div className=\"flex-large\">\n          <h2>View Contacts</h2>\n          <button\n            onClick={() => {\n              editContact(initialState);\n              toggleModal();\n            }}\n          >\n            Add Contact\n          </button>\n          <ContactList\n            contacts={list}\n            meta={meta}\n            setMeta={setMeta}\n            sortContacts={sortContacts}\n            editContact={editContact}\n            deleteContact={deleteContact}\n            sort={sort}\n            setSort={setSort}\n            toggleModal={toggleModal}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactComponent;\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport { Contact, initialState } from \"./model\";\nimport validateContact, { initialErrorState, validForm } from \"./validate\";\n\ninterface Props {\n  currentContact: Contact;\n  updateContact: (id: number, contact: Contact) => void;\n  toggleModal: () => void;\n  mode: string;\n  addContact: (contact: Contact) => void;\n}\n\nconst ContactForm = ({ currentContact, updateContact, toggleModal, mode, addContact }: Props) => {\n  const [contact, setContact] = useState(currentContact);\n  const [errors, setErrors] = useState(initialErrorState);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target as HTMLInputElement;\n    setErrors(validateContact(errors, name, value));\n\n    setContact({ ...contact, [name]: value });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>, id: number, contact: Contact) => {\n    event.preventDefault();\n    if (!contact.name || !contact.email || !contact.contactNumber) return;\n    if (!validForm(errors)) return;\n\n    if (id === 0) {\n      addContact(contact);\n    } else {\n      updateContact(id, contact);\n    }\n\n    setContact(initialState);\n    toggleModal();\n  };\n\n  useEffect(() => {\n    setContact(currentContact);\n    setErrors(initialErrorState);\n  }, [currentContact]);\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e, currentContact.id || 0, contact)}>\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={contact.name} onChange={handleInputChange} />\n      {errors.name.length > 0 && <span className=\"error\">{errors.name}</span>}\n      <label>Email</label>\n      <input type=\"email\" name=\"email\" value={contact.email} onChange={handleInputChange} />\n      {errors.email.length > 0 && <span className=\"error\">{errors.email}</span>}\n      <label>Contact Number</label>\n      <input\n        type=\"text\"\n        name=\"contactNumber\"\n        value={contact.contactNumber}\n        onChange={handleInputChange}\n      />\n      {errors.contactNumber.length > 0 && <span className=\"error\">{errors.contactNumber}</span>}\n      <button>{mode}</button>\n      <button onClick={() => toggleModal()} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport { FaSortDown, FaSortUp } from \"react-icons/fa\";\nimport { Contact } from \"./model\";\n\ninterface Sort {\n  type: \"asc\" | \"desc\";\n  field: string;\n}\n\ninterface Meta {\n  currentPage: number;\n  perPage: number;\n  pageNumbers: number[];\n}\n\nexport interface Props {\n  contacts: Contact[];\n  meta: Meta;\n  setMeta: (meta: Meta) => void;\n  deleteContact: (id?: number) => void;\n  editContact: (contact: Contact) => void;\n  sortContacts: (sort: \"asc\" | \"desc\", field: string) => void;\n  sort: Sort;\n  setSort: (sort: Sort) => void;\n  toggleModal: () => void;\n}\n\nconst ContactList = ({\n  contacts,\n  meta,\n  setMeta,\n  deleteContact,\n  editContact,\n  sortContacts,\n  sort,\n  setSort,\n  toggleModal,\n}: Props) => {\n  const SortColumn = (field: string) => {\n    const asc = (\n      <FaSortUp\n        onClick={() => {\n          sortContacts(\"asc\", field);\n          setSort({ type: \"asc\", field });\n        }}\n      />\n    );\n    const desc = (\n      <FaSortDown\n        onClick={() => {\n          sortContacts(\"desc\", field);\n          setSort({ type: \"desc\", field });\n        }}\n      />\n    );\n    const individualSort = sort.type === \"asc\" ? desc : asc;\n\n    const AllSort = (\n      <>\n        {asc} {desc}\n      </>\n    );\n\n    return field === sort.field ? individualSort : AllSort;\n  };\n\n  const renderPageNumbers = meta.pageNumbers.map((number) => {\n    return (\n      <span\n        key={number}\n        onClick={() => {\n          setMeta({ ...meta, currentPage: number });\n        }}\n      >\n        {number}\n      </span>\n    );\n  });\n\n  return (\n    <>\n      <span> Current Sort: {`${sort.field} ${sort.type}`}</span>\n      <table>\n        <thead>\n          <tr>\n            <th>Name{SortColumn(\"name\")}</th>\n            <th>Email{SortColumn(\"email\")}</th>\n            <th>Contact Number{SortColumn(\"contactNumber\")}</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {contacts.length > 0 ? (\n            contacts.map((contact) => (\n              <tr key={contact.id}>\n                <td>{contact.name}</td>\n                <td>{contact.email}</td>\n                <td>{contact.contactNumber}</td>\n                <td>\n                  <button\n                    className=\"button muted-button\"\n                    onClick={() => {\n                      editContact(contact);\n                      toggleModal();\n                    }}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className=\"button muted-button\"\n                    onClick={() => {\n                      deleteContact(contact.id);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan={3}>No Contacts</td>\n            </tr>\n          )}\n        </tbody>\n        <tfoot>\n          <tr>\n            <th>{renderPageNumbers}</th>\n          </tr>\n        </tfoot>\n      </table>\n    </>\n  );\n};\n\nexport default ContactList;\n","export interface Contact {\n    id?: number;\n    name: string;\n    email: string;\n    contactNumber: string;\n}\n\nexport const initialState: Contact = {\n    id: 0, name: '', email: '', contactNumber: ''\n}\n","export interface ContactError {\n    name: string;\n    email: string;\n    contactNumber: string;\n}\n\nexport const initialErrorState: ContactError = {\n    name: '', email: '', contactNumber: ''\n}\n\nconst validEmailRegex =\n    RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n\nconst validateLength = (name: string, value: string, length: number) =>\n    value.length < 5 ?\n        `${name} must be ${length} characters long!` : ''\n\nexport const validForm = (errors: ContactError) => {\n    return errors.contactNumber === '' && errors.email === '' && errors.name === '';\n}\n\n\nconst validate = (errors: ContactError, name: string, value: string) => {\n    switch (name) {\n        case 'name':\n            errors.name =\n                validateLength('Name', value, 5);\n            break;\n        case 'email':\n            errors.email =\n                validEmailRegex.test(value)\n                    ? ''\n                    : 'Email is not valid!';\n            break;\n        case 'contactNumber':\n            errors.contactNumber =\n                validateLength('Contact Number', value, 4);\n            break;\n        default:\n            break;\n\n\n    }\n    return errors;\n}\n\nexport default validate;"],"names":["Modal","customStyles","content","top","left","right","bottom","marginRight","transform","width","calculatePageNumbers","length","pageNumbers","i","Math","ceil","push","data","id","name","email","contactNumber","_useState","useState","_useState2","_slicedToArray","contacts","setContacts","_useState3","_useState4","list","setList","_useState5","type","field","_useState6","sort","setSort","_useState7","currentPage","perPage","_useState8","meta","setMeta","_useState9","_useState10","showModal","setShowModal","_useState11","initialState","_useState12","currentContact","setCurrentContact","editContact","contact","toggleModal","mode","useEffect","metaPage","beforePage","indexOfLast","lastPage","indexOfFirst","slice","_jsxs","className","children","_jsx","isOpen","style","contentLabel","FormContact","addContact","orderBy","concat","_toConsumableArray","updateContact","updatedContact","map","onClick","ContactList","sortContacts","sortedContacts","deleteContact","filter","_ref","setContact","initialErrorState","errors","setErrors","handleInputChange","event","_ref2","target","value","validateContact","_objectSpread","_defineProperty","onSubmit","e","preventDefault","validForm","handleSubmit","onChange","SortColumn","asc","FaSortUp","desc","FaSortDown","individualSort","AllSort","_Fragment","renderPageNumbers","number","colSpan","validEmailRegex","RegExp","validateLength","test"],"sourceRoot":""}