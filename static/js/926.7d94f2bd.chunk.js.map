{"version":3,"file":"static/js/926.7d94f2bd.chunk.js","mappings":"oMAOaA,EAAwB,CACjCC,GAAI,EAAGC,KAAM,GAAIC,MAAO,GAAIC,cAAe,ICFlCC,EAAkC,CAC3CH,KAAM,GAAIC,MAAO,GAAIC,cAAe,IAGlCE,EACFC,OAAO,8GAELC,EAAiB,SAACN,EAAcO,EAAeC,GAAc,OAC/DD,EAAMC,OAAS,EAAC,GAAAC,OACTT,EAAI,aAAAS,OAAYD,EAAM,qBAAsB,EAAE,EA+BzD,EAxBiB,SAACE,EAAsBV,EAAcO,GAClD,OAAQP,GACJ,IAAK,OACDU,EAAOV,KACHM,EAAe,OAAQC,EAAO,GAClC,MACJ,IAAK,QACDG,EAAOT,MACHG,EAAgBO,KAAKJ,GACf,GACA,sBACV,MACJ,IAAK,gBACDG,EAAOR,cACHI,EAAe,iBAAkBC,EAAO,GAOpD,OAAOG,CACX,E,SCuBA,EAvDoB,SAAHE,GAAiF,IAA3EC,EAAcD,EAAdC,eAAgBC,EAAaF,EAAbE,cAAeC,EAAWH,EAAXG,YAAaC,EAAIJ,EAAJI,KAAMC,EAAUL,EAAVK,WACvEC,GAA8BC,EAAAA,EAAAA,UAASN,GAAeO,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAA4BL,EAAAA,EAAAA,UAAShB,GAAkBsB,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhDd,EAAMe,EAAA,GAAEC,EAASD,EAAA,GAElBE,EAAoB,SAACC,GACzB,IAAAC,EAAwBD,EAAME,OAAtB9B,EAAI6B,EAAJ7B,KAAMO,EAAKsB,EAALtB,MACdmB,EAAUK,EAAgBrB,EAAQV,EAAMO,IAExCgB,GAAUS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIV,GAAO,IAAAW,EAAAA,EAAAA,GAAA,GAAGjC,EAAOO,IACnC,EAsBA,OALA2B,EAAAA,EAAAA,YAAU,WACRX,EAAWV,GACXa,EAAUvB,EACZ,GAAG,CAACU,KAGFsB,EAAAA,EAAAA,MAAA,QAAMC,SAAU,SAACC,GAAC,OArBC,SAACT,EAAmC7B,EAAYuB,GACnEM,EAAMU,iBACDhB,EAAQtB,MAASsB,EAAQrB,OAAUqB,EAAQpB,eDR3B,SAACQ,GACtB,MAAgC,KAAzBA,EAAOR,eAAyC,KAAjBQ,EAAOT,OAAgC,KAAhBS,EAAOV,IACxE,CCOSuC,CAAU7B,KAEJ,IAAPX,EACFkB,EAAWK,GAEXR,EAAcf,EAAIuB,GAGpBC,EAAWzB,GACXiB,IACF,CAQyByB,CAAaH,EAAGxB,EAAed,IAAM,EAAGuB,EAAQ,EAACmB,SAAA,EACtEC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,UACPC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAO3C,KAAK,OAAOO,MAAOe,EAAQtB,KAAM4C,SAAUjB,IAC7DjB,EAAOV,KAAKQ,OAAS,IAAKkC,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAOJ,SAAE/B,EAAOV,QAC3D0C,EAAAA,EAAAA,KAAA,SAAAD,SAAO,WACPC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,QAAQ3C,KAAK,QAAQO,MAAOe,EAAQrB,MAAO2C,SAAUjB,IAChEjB,EAAOT,MAAMO,OAAS,IAAKkC,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAOJ,SAAE/B,EAAOT,SAC5DyC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBACPC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACL3C,KAAK,gBACLO,MAAOe,EAAQpB,cACf0C,SAAUjB,IAEXjB,EAAOR,cAAcM,OAAS,IAAKkC,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAOJ,SAAE/B,EAAOR,iBACpEwC,EAAAA,EAAAA,KAAA,UAAAD,SAASzB,KACT0B,EAAAA,EAAAA,KAAA,UAAQI,QAAS,kBAAM/B,GAAa,EAAE8B,UAAU,sBAAqBJ,SAAC,aAK5E,E,SCsEA,EA5GoB,SAAH7B,GAUH,IATZmC,EAAQnC,EAARmC,SACAC,EAAIpC,EAAJoC,KACAC,EAAOrC,EAAPqC,QACAC,EAAatC,EAAbsC,cACAC,EAAWvC,EAAXuC,YACAC,EAAYxC,EAAZwC,aACAC,EAAIzC,EAAJyC,KACAC,EAAO1C,EAAP0C,QACAvC,EAAWH,EAAXG,YAEMwC,EAAa,SAACC,GAClB,IAAMC,GACJf,EAAAA,EAAAA,KAACgB,EAAAA,IAAQ,CACPZ,QAAS,WACPM,EAAa,MAAOI,GACpBF,EAAQ,CAAEX,KAAM,MAAOa,MAAAA,GACzB,IAGEG,GACJjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CACTd,QAAS,WACPM,EAAa,OAAQI,GACrBF,EAAQ,CAAEX,KAAM,OAAQa,MAAAA,GAC1B,IAGEK,EAA+B,QAAdR,EAAKV,KAAiBgB,EAAOF,EAE9CK,GACJ3B,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAAtB,SAAA,CACGgB,EAAI,IAAEE,KAIX,OAAOH,IAAUH,EAAKG,MAAQK,EAAiBC,CACjD,EAEME,EAAoBhB,EAAKiB,YAAYC,KAAI,SAACC,GAC9C,OACEzB,EAAAA,EAAAA,KAAA,QAEEI,QAAS,WACPG,GAAOjB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIgB,GAAI,IAAEoB,YAAaD,IAClC,EAAE1B,SAED0B,GALIA,EAQX,IAEA,OACEhC,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAAtB,SAAA,EACEN,EAAAA,EAAAA,MAAA,QAAAM,SAAA,CAAM,kBAAe,GAAAhC,OAAI4C,EAAKG,MAAK,KAAA/C,OAAI4C,EAAKV,UAC5CR,EAAAA,EAAAA,MAAA,SAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACEN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,CAAI,OAAKc,EAAW,YACpBpB,EAAAA,EAAAA,MAAA,MAAAM,SAAA,CAAI,QAAMc,EAAW,aACrBpB,EAAAA,EAAAA,MAAA,MAAAM,SAAA,CAAI,iBAAec,EAAW,qBAC9Bb,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGM,EAASvC,OAAS,EACjBuC,EAASmB,KAAI,SAAC5C,GAAO,OACnBa,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKnB,EAAQtB,QACb0C,EAAAA,EAAAA,KAAA,MAAAD,SAAKnB,EAAQrB,SACbyC,EAAAA,EAAAA,KAAA,MAAAD,SAAKnB,EAAQpB,iBACbiC,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEG,UAAU,sBACVC,QAAS,WACPK,EAAY7B,GACZP,GACF,EAAE0B,SACH,UAGDC,EAAAA,EAAAA,KAAA,UACEG,UAAU,sBACVC,QAAS,WACPI,EAAc5B,EAAQvB,GACxB,EAAE0C,SACH,gBAnBInB,EAAQvB,GAuBZ,KAGP2C,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAI2B,QAAS,EAAE5B,SAAC,qBAItBC,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKuB,aAMjB,EC7HAM,IAAAA,cAAoB,SAEpB,IAAMC,EAAe,CACnBC,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACXC,MAAO,UA0BLC,EAAuB,SAACxE,GAE5B,IADA,IAAMyD,EAAc,GACXgB,EAAI,EAAGA,GAAKC,KAAKC,KAAK3E,EAdhB,GAcoCyE,IACjDhB,EAAYmB,KAAKH,GAEnB,OAAOhB,CACT,EA8GA,EA5GsB,WACpB,IAnBwBzD,EAmBlB6E,EAAkB,CACtB,CAAEtF,GAAI,EAAGC,KAAM,QAASC,MAAO,iBAAkBC,cAAe,aAChE,CAAEH,GAAI,EAAGC,KAAM,QAASC,MAAO,kBAAmBC,cAAe,WACjE,CAAEH,GAAI,EAAGC,KAAM,OAAQC,MAAO,iBAAkBC,cAAe,WAC/D,CAAEH,GAAI,EAAGC,KAAM,OAAQC,MAAO,iBAAkBC,cAAe,WAC/D,CAAEH,GAAI,EAAGC,KAAM,OAAQC,MAAO,iBAAkBC,cAAe,WAC/D,CAAEH,GAAI,EAAGC,KAAM,OAAQC,MAAO,iBAAkBC,cAAe,WAC/D,CAAEH,GAAI,EAAGC,KAAM,OAAQC,MAAO,iBAAkBC,cAAe,aAGjEgB,GAAgCC,EAAAA,EAAAA,UAASkE,GAAKjE,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC6B,EAAQ3B,EAAA,GAAEkE,EAAWlE,EAAA,GAC5BI,GAAwBL,EAAAA,EAAAA,UAASkE,GAAK5D,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/B+D,EAAI9D,EAAA,GAAE+D,EAAO/D,EAAA,GACpBgE,GAAwBtE,EAAAA,EAAAA,UAAe,CAAEwB,KAAM,MAAOa,MAAO,SAASkC,GAAArE,EAAAA,EAAAA,GAAAoE,EAAA,GAA/DpC,EAAIqC,EAAA,GAAEpC,EAAOoC,EAAA,GACpBC,GAAwBxE,EAAAA,EAAAA,WAhCAX,EAgCgCuC,EAASvC,OA7B1D,CACL4D,YAAa,EACbwB,QAPa,EAQb3B,YAJkBe,EAAqBxE,MA8BgCqF,GAAAxE,EAAAA,EAAAA,GAAAsE,EAAA,GAAlE3C,EAAI6C,EAAA,GAAE5C,EAAO4C,EAAA,GACpBC,GAAkC3E,EAAAA,EAAAA,WAAS,GAAM4E,GAAA1E,EAAAA,EAAAA,GAAAyE,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAgB9BG,GAA4C/E,EAAAA,EAAAA,UAASrB,GAAaqG,GAAA9E,EAAAA,EAAAA,GAAA6E,EAAA,GAA3DrF,EAAcsF,EAAA,GAAEC,EAAiBD,EAAA,GAElChD,EAAc,SAAC7B,GACnB8E,EAAkB9E,EACpB,EAMMP,EAAc,WAClBkF,GAAcD,EAChB,EAEMhF,EAA6B,IAAtBH,EAAed,GAAW,cAAgB,eAsBvD,OArBAmC,EAAAA,EAAAA,YAAU,WACR,IAAM+B,EAAce,EAAqBjC,EAASvC,QAC9C4D,EAAcpB,EAAKoB,YACnBH,EAAYA,EAAYzD,OAAS,GAAKwC,EAAKoB,cAC7CA,EAAcH,EAAYA,EAAYzD,OAAS,IAEjDyC,EAAQ,CAAE2C,QAxEG,EAwEgBxB,YAAAA,EAAaH,YAAAA,GAC5C,GAAG,CAAClB,EAASvC,OAAQwC,EAAKoB,eAE1BlC,EAAAA,EAAAA,YAAU,WACR,IAAMmE,EAAWrD,EAAKoB,YAAcpB,EAAK4C,QACnCU,GAActD,EAAKoB,YAAc,GAAKpB,EAAK4C,QAC3CW,EAAcF,EAAWtD,EAASvC,OAASwC,EAAKoB,YAAcpB,EAAK4C,QAAU7C,EAASvC,OACtFgG,EAAWxD,EAAKiB,YAAYjB,EAAKiB,YAAYzD,OAAS,GACtDiG,EACJzD,EAAKoB,cAAgBoC,EACjBzD,EAASvC,QAAUuC,EAASvC,OAAS8F,GACrCC,EAAcvD,EAAK4C,QACzBJ,EAAQzC,EAAS2D,MAAMD,EAAcF,GACvC,GAAG,CAACvD,EAAMD,KAGRZ,EAAAA,EAAAA,MAAA,OAAKU,UAAU,YAAWJ,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJN,EAAAA,EAAAA,MAAA,OAAKU,UAAU,WAAUJ,SAAA,EACvBN,EAAAA,EAAAA,MAACmC,IAAK,CAACqC,OAAQX,EAAWY,MAAOrC,EAAcsC,aAAc7F,EAAKyB,SAAA,EAChEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKzB,KACL0B,EAAAA,EAAAA,KAACoE,EAAW,CACVjG,eAAgBA,EAChBI,WA1DS,SAACK,GAClBA,EAAQvB,GAAKgD,EAASvC,OAAS,EAC/B8E,GAAYyB,EAAAA,EAAAA,SAAQ,GAADtG,QAAAuG,EAAAA,EAAAA,GAAKjE,GAAQ,CAAEzB,IAAU,CAAC+B,EAAKG,OAAQ,CAACH,EAAKV,OAClE,EAwDU7B,cAvCY,SAACf,EAAYkH,GACjC3B,EAAYvC,EAASmB,KAAI,SAAC5C,GAAO,OAAMA,EAAQvB,KAAOA,EAAKkH,EAAiB3F,CAAO,IACrF,EAsCUP,YAAaA,EACbC,KAAMA,QAGVmB,EAAAA,EAAAA,MAAA,OAAKU,UAAU,aAAYJ,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,UACEI,QAAS,WACPK,EAAYrD,GACZiB,GACF,EAAE0B,SACH,iBAGDC,EAAAA,EAAAA,KAACwE,EAAW,CACVnE,SAAUwC,EACVvC,KAAMA,EACNC,QAASA,EACTG,aArEW,SAACC,EAAsBG,GAC1C,IAAM2D,GAAiBJ,EAAAA,EAAAA,SAAQhE,EAAU,CAACS,GAAQ,CAACH,IACnDiC,EAAY6B,EACd,EAmEUhE,YAAaA,EACbD,cA3EY,SAACnD,GACrBuF,EAAYvC,EAASqE,QAAO,SAAC9F,GAAO,OAAKA,EAAQvB,KAAOA,CAAE,IAC5D,EA0EUsD,KAAMA,EACNC,QAASA,EACTvC,YAAaA,YAMzB,ECzJAsG,EAAAA,WAAoBC,SAASC,eAAe,SAAUC,QACpD9E,EAAAA,EAAAA,KAAC+E,EAAAA,WAAgB,CAAAhF,UACfC,EAAAA,EAAAA,KAACgF,EAAG,M","sources":["contacts/model.ts","contacts/validate.ts","contacts/form.tsx","contacts/list.tsx","App.tsx","bootstrap.tsx"],"sourcesContent":["export interface Contact {\n    id?: number;\n    name: string;\n    email: string;\n    contactNumber: string;\n}\n\nexport const initialState: Contact = {\n    id: 0, name: '', email: '', contactNumber: ''\n}\n","export interface ContactError {\n    name: string;\n    email: string;\n    contactNumber: string;\n}\n\nexport const initialErrorState: ContactError = {\n    name: '', email: '', contactNumber: ''\n}\n\nconst validEmailRegex =\n    RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n\nconst validateLength = (name: string, value: string, length: number) =>\n    value.length < 5 ?\n        `${name} must be ${length} characters long!` : ''\n\nexport const validForm = (errors: ContactError) => {\n    return errors.contactNumber === '' && errors.email === '' && errors.name === '';\n}\n\n\nconst validate = (errors: ContactError, name: string, value: string) => {\n    switch (name) {\n        case 'name':\n            errors.name =\n                validateLength('Name', value, 5);\n            break;\n        case 'email':\n            errors.email =\n                validEmailRegex.test(value)\n                    ? ''\n                    : 'Email is not valid!';\n            break;\n        case 'contactNumber':\n            errors.contactNumber =\n                validateLength('Contact Number', value, 4);\n            break;\n        default:\n            break;\n\n\n    }\n    return errors;\n}\n\nexport default validate;","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport { Contact, initialState } from \"./model\";\nimport validateContact, { initialErrorState, validForm } from \"./validate\";\n\ninterface Props {\n  currentContact: Contact;\n  updateContact: (id: number, contact: Contact) => void;\n  toggleModal: () => void;\n  mode: string;\n  addContact: (contact: Contact) => void;\n}\n\nconst ContactForm = ({ currentContact, updateContact, toggleModal, mode, addContact }: Props) => {\n  const [contact, setContact] = useState(currentContact);\n  const [errors, setErrors] = useState(initialErrorState);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target as HTMLInputElement;\n    setErrors(validateContact(errors, name, value));\n\n    setContact({ ...contact, [name]: value });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>, id: number, contact: Contact) => {\n    event.preventDefault();\n    if (!contact.name || !contact.email || !contact.contactNumber) return;\n    if (!validForm(errors)) return;\n\n    if (id === 0) {\n      addContact(contact);\n    } else {\n      updateContact(id, contact);\n    }\n\n    setContact(initialState);\n    toggleModal();\n  };\n\n  useEffect(() => {\n    setContact(currentContact);\n    setErrors(initialErrorState);\n  }, [currentContact]);\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e, currentContact.id || 0, contact)}>\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={contact.name} onChange={handleInputChange} />\n      {errors.name.length > 0 && <span className=\"error\">{errors.name}</span>}\n      <label>Email</label>\n      <input type=\"email\" name=\"email\" value={contact.email} onChange={handleInputChange} />\n      {errors.email.length > 0 && <span className=\"error\">{errors.email}</span>}\n      <label>Contact Number</label>\n      <input\n        type=\"text\"\n        name=\"contactNumber\"\n        value={contact.contactNumber}\n        onChange={handleInputChange}\n      />\n      {errors.contactNumber.length > 0 && <span className=\"error\">{errors.contactNumber}</span>}\n      <button>{mode}</button>\n      <button onClick={() => toggleModal()} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport { FaSortDown, FaSortUp } from \"react-icons/fa\";\nimport { Contact } from \"./model\";\n\ninterface Sort {\n  type: \"asc\" | \"desc\";\n  field: string;\n}\n\ninterface Meta {\n  currentPage: number;\n  perPage: number;\n  pageNumbers: number[];\n}\n\nexport interface Props {\n  contacts: Contact[];\n  meta: Meta;\n  setMeta: (meta: Meta) => void;\n  deleteContact: (id?: number) => void;\n  editContact: (contact: Contact) => void;\n  sortContacts: (sort: \"asc\" | \"desc\", field: string) => void;\n  sort: Sort;\n  setSort: (sort: Sort) => void;\n  toggleModal: () => void;\n}\n\nconst ContactList = ({\n  contacts,\n  meta,\n  setMeta,\n  deleteContact,\n  editContact,\n  sortContacts,\n  sort,\n  setSort,\n  toggleModal,\n}: Props) => {\n  const SortColumn = (field: string) => {\n    const asc = (\n      <FaSortUp\n        onClick={() => {\n          sortContacts(\"asc\", field);\n          setSort({ type: \"asc\", field });\n        }}\n      />\n    );\n    const desc = (\n      <FaSortDown\n        onClick={() => {\n          sortContacts(\"desc\", field);\n          setSort({ type: \"desc\", field });\n        }}\n      />\n    );\n    const individualSort = sort.type === \"asc\" ? desc : asc;\n\n    const AllSort = (\n      <>\n        {asc} {desc}\n      </>\n    );\n\n    return field === sort.field ? individualSort : AllSort;\n  };\n\n  const renderPageNumbers = meta.pageNumbers.map((number) => {\n    return (\n      <span\n        key={number}\n        onClick={() => {\n          setMeta({ ...meta, currentPage: number });\n        }}\n      >\n        {number}\n      </span>\n    );\n  });\n\n  return (\n    <>\n      <span> Current Sort: {`${sort.field} ${sort.type}`}</span>\n      <table>\n        <thead>\n          <tr>\n            <th>Name{SortColumn(\"name\")}</th>\n            <th>Email{SortColumn(\"email\")}</th>\n            <th>Contact Number{SortColumn(\"contactNumber\")}</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {contacts.length > 0 ? (\n            contacts.map((contact) => (\n              <tr key={contact.id}>\n                <td>{contact.name}</td>\n                <td>{contact.email}</td>\n                <td>{contact.contactNumber}</td>\n                <td>\n                  <button\n                    className=\"button muted-button\"\n                    onClick={() => {\n                      editContact(contact);\n                      toggleModal();\n                    }}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className=\"button muted-button\"\n                    onClick={() => {\n                      deleteContact(contact.id);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan={3}>No Contacts</td>\n            </tr>\n          )}\n        </tbody>\n        <tfoot>\n          <tr>\n            <th>{renderPageNumbers}</th>\n          </tr>\n        </tfoot>\n      </table>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { orderBy } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport FormContact from \"./contacts/form\";\nimport ContactList from \"./contacts/list\";\nimport { Contact, initialState } from \"./contacts/model\";\nimport \"./primitive.css\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"500px\",\n  },\n};\ninterface Sort {\n  type: \"asc\" | \"desc\";\n  field: string;\n}\n\ninterface Meta {\n  currentPage: number;\n  perPage: number;\n  pageNumbers: number[];\n}\n\nconst PER_PAGE = 5;\n\nconst initialMetaState = (length: number) => {\n  const perPage = PER_PAGE;\n  const pageNumbers = calculatePageNumbers(length);\n  return {\n    currentPage: 1,\n    perPage,\n    pageNumbers,\n  };\n};\n\nconst calculatePageNumbers = (length: number) => {\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(length / PER_PAGE); i++) {\n    pageNumbers.push(i);\n  }\n  return pageNumbers;\n};\n\nconst App: React.FC = () => {\n  const data: Contact[] = [\n    { id: 1, name: \"Tania\", email: \"tania@mail.com\", contactNumber: \"123123123\" },\n    { id: 2, name: \"Craig\", email: \"craig@email.com\", contactNumber: \"6546456\" },\n    { id: 3, name: \"Ben1\", email: \"ben1@email.com\", contactNumber: \"2342134\" },\n    { id: 4, name: \"Ben2\", email: \"ben2@email.com\", contactNumber: \"2342234\" },\n    { id: 5, name: \"Ben3\", email: \"ben3@email.com\", contactNumber: \"2342334\" },\n    { id: 6, name: \"Ben4\", email: \"ben4@email.com\", contactNumber: \"2342434\" },\n    { id: 7, name: \"Ben5\", email: \"ben5@email.com\", contactNumber: \"23425 34\" },\n  ];\n\n  const [contacts, setContacts] = useState(data);\n  const [list, setList] = useState(data);\n  const [sort, setSort] = useState<Sort>({ type: \"asc\", field: \"name\" });\n  const [meta, setMeta] = useState<Meta>(initialMetaState(contacts.length));\n  const [showModal, setShowModal] = useState(false);\n\n  const addContact = (contact: Contact) => {\n    contact.id = contacts.length + 1;\n    setContacts(orderBy([...contacts, contact], [sort.field], [sort.type]));\n  };\n\n  const deleteContact = (id?: number) => {\n    setContacts(contacts.filter((contact) => contact.id !== id));\n  };\n\n  const sortContacts = (sort: \"desc\" | \"asc\", field: string) => {\n    const sortedContacts = orderBy(contacts, [field], [sort]); // Use Lodash to sort array by 'name'\n    setContacts(sortedContacts);\n  };\n\n  const [currentContact, setCurrentContact] = useState(initialState);\n\n  const editContact = (contact: Contact) => {\n    setCurrentContact(contact);\n  };\n\n  const updateContact = (id: number, updatedContact: Contact) => {\n    setContacts(contacts.map((contact) => (contact.id === id ? updatedContact : contact)));\n  };\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const mode = currentContact.id === 0 ? \"Add Contact\" : \"Edit Contact\";\n  useEffect(() => {\n    const pageNumbers = calculatePageNumbers(contacts.length);\n    let currentPage = meta.currentPage;\n    if (pageNumbers[pageNumbers.length - 1] < meta.currentPage) {\n      currentPage = pageNumbers[pageNumbers.length - 1];\n    }\n    setMeta({ perPage: PER_PAGE, currentPage, pageNumbers });\n  }, [contacts.length, meta.currentPage]);\n\n  useEffect(() => {\n    const metaPage = meta.currentPage * meta.perPage;\n    const beforePage = (meta.currentPage - 1) * meta.perPage;\n    const indexOfLast = metaPage < contacts.length ? meta.currentPage * meta.perPage : contacts.length;\n    const lastPage = meta.pageNumbers[meta.pageNumbers.length - 1];\n    const indexOfFirst =\n      meta.currentPage === lastPage\n        ? contacts.length - (contacts.length - beforePage)\n        : indexOfLast - meta.perPage;\n    setList(contacts.slice(indexOfFirst, indexOfLast));\n  }, [meta, contacts]);\n\n  return (\n    <div className=\"container\">\n      <h1>Contacts</h1>\n      <div className=\"flex-row\">\n        <Modal isOpen={showModal} style={customStyles} contentLabel={mode}>\n          <h2>{mode}</h2>\n          <FormContact\n            currentContact={currentContact}\n            addContact={addContact}\n            updateContact={updateContact}\n            toggleModal={toggleModal}\n            mode={mode}\n          />\n        </Modal>\n        <div className=\"flex-large\">\n          <h2>View Contacts</h2>\n          <button\n            onClick={() => {\n              editContact(initialState);\n              toggleModal();\n            }}\n          >\n            Add Contact\n          </button>\n          <ContactList\n            contacts={list}\n            meta={meta}\n            setMeta={setMeta}\n            sortContacts={sortContacts}\n            editContact={editContact}\n            deleteContact={deleteContact}\n            sort={sort}\n            setSort={setSort}\n            toggleModal={toggleModal}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"names":["initialState","id","name","email","contactNumber","initialErrorState","validEmailRegex","RegExp","validateLength","value","length","concat","errors","test","_ref","currentContact","updateContact","toggleModal","mode","addContact","_useState","useState","_useState2","_slicedToArray","contact","setContact","_useState3","_useState4","setErrors","handleInputChange","event","_ref2","target","validateContact","_objectSpread","_defineProperty","useEffect","_jsxs","onSubmit","e","preventDefault","validForm","handleSubmit","children","_jsx","type","onChange","className","onClick","contacts","meta","setMeta","deleteContact","editContact","sortContacts","sort","setSort","SortColumn","field","asc","FaSortUp","desc","FaSortDown","individualSort","AllSort","_Fragment","renderPageNumbers","pageNumbers","map","number","currentPage","colSpan","Modal","customStyles","content","top","left","right","bottom","marginRight","transform","width","calculatePageNumbers","i","Math","ceil","push","data","setContacts","list","setList","_useState5","_useState6","_useState7","perPage","_useState8","_useState9","_useState10","showModal","setShowModal","_useState11","_useState12","setCurrentContact","metaPage","beforePage","indexOfLast","lastPage","indexOfFirst","slice","isOpen","style","contentLabel","FormContact","orderBy","_toConsumableArray","updatedContact","ContactList","sortedContacts","filter","ReactDOM","document","getElementById","render","React","App"],"sourceRoot":""}