{"version":3,"file":"static/js/src_bootstrap_tsx.4426200e.chunk.js","mappings":"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","sources":["contacts/list.tsx","contacts/model.ts","contacts/validate.ts","contacts/form.tsx","App.tsx","bootstrap.tsx"],"sourcesContent":["import React from 'react';\r\nimport { FaSortUp, FaSortDown } from 'react-icons/fa';\r\nimport { Contact } from './model';\r\n\r\ninterface Sort {\r\n  type: \"asc\" | \"desc\";\r\n  field: string;\r\n}\r\n\r\ninterface Meta {\r\n  currentPage: number;\r\n  perPage: number;\r\n  pageNumbers: number[];\r\n}\r\n\r\nexport interface Props {\r\n    contacts: Contact[];\r\n    meta: Meta;\r\n    setMeta: (meta:Meta) => void;\r\n    deleteContact: (id?:number) => void;\r\n    editContact: (contact:Contact) => void;\r\n    sortContacts: (sort: \"asc\" | \"desc\", field: string) => void;\r\n    sort: Sort;\r\n    setSort: (sort: Sort) => void;\r\n    toggleModal: () => void;\r\n}\r\n\r\nconst ContactList = ({contacts, meta, setMeta, deleteContact, editContact, sortContacts, sort, setSort,toggleModal}:Props) => {\r\n  const SortColumn = (field: string) => {\r\n    const asc = \r\n      <FaSortUp onClick={()=>{\r\n        sortContacts(\"asc\",field);\r\n        setSort({type: \"asc\", field})\r\n      }}/>;\r\n    const desc = \r\n      <FaSortDown onClick={()=>{\r\n        sortContacts(\"desc\",field);\r\n        setSort({type: \"desc\", field})\r\n      }}/>;\r\n    const individualSort = sort.type === \"asc\" ? desc : asc;\r\n\r\n    const AllSort = <>{asc} {desc}</>\r\n      \r\n    return (\r\n      field === sort.field ? individualSort : AllSort\r\n    )\r\n  }\r\n  \r\n\r\n  const renderPageNumbers = meta.pageNumbers.map(number => {\r\n    return (\r\n      <span\r\n        key={number}\r\n        onClick={()=>{setMeta({...meta, currentPage: number})}}\r\n      >\r\n        {number}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <span> Current Sort: {`${sort.field} ${sort.type}`}</span>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              Name{ SortColumn(\"name\") }\r\n            </th>\r\n            <th>Email{ SortColumn(\"email\") }\r\n            </th>\r\n            <th>Contact Number{ SortColumn(\"contactNumber\") }\r\n            </th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n            {contacts.length > 0 ? (\r\n                contacts.map(contact => (\r\n                <tr key={contact.id}>\r\n                    <td>{contact.name}</td>\r\n                    <td>{contact.email}</td>\r\n                    <td>{contact.contactNumber}</td>\r\n                    <td>\r\n                    <button className=\"button muted-button\" onClick={() => {editContact(contact); toggleModal();}}>Edit</button>\r\n                    <button className=\"button muted-button\" onClick={() => {deleteContact(contact.id)}}>Delete</button>\r\n                    </td>\r\n                </tr>\r\n                ))\r\n            ) : (\r\n                <tr>\r\n                <td colSpan={3}>No Contacts</td>\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n        <tfoot><tr><th>{renderPageNumbers}</th></tr></tfoot>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ContactList;\r\n","export interface Contact {\r\n    id?: number;\r\n    name: string;\r\n    email: string;\r\n    contactNumber: string;\r\n}\r\n\r\nexport const initialState: Contact = {\r\n    id: 0, name: '', email: '', contactNumber: '' \r\n}\r\n","export interface ContactError {\r\n    name: string;\r\n    email: string;\r\n    contactNumber: string;\r\n}\r\n\r\nexport const initialErrorState: ContactError = {\r\n    name: '', email: '', contactNumber: '' \r\n}\r\n\r\nconst validEmailRegex = \r\n  RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\r\n\r\nconst validateLength = (name: string, value: string, length: number) =>\r\n    value.length < 5 ?\r\n    `${name} must be ${length} characters long!` : ''\r\n\r\nexport const validForm = (errors: ContactError) => {\r\n    return errors.contactNumber === '' && errors.email === '' && errors.name === '';\r\n}\r\n\r\n\r\nconst validate = (errors: ContactError, name: string, value: string) => {  \r\n    switch (name) {\r\n        case 'name': \r\n            errors.name = \r\n            validateLength('Name',value,5);\r\n            break;\r\n        case 'email': \r\n            errors.email = \r\n            validEmailRegex.test(value)\r\n                ? ''\r\n                : 'Email is not valid!';\r\n            break;\r\n        case 'contactNumber': \r\n            errors.contactNumber = \r\n            validateLength('Contact Number',value,4);\r\n            break;\r\n        default:\r\n            break;\r\n    \r\n    \r\n    }\r\n    return errors;\r\n}\r\n\r\nexport default validate;","import React, { useState, useEffect, ChangeEvent, FormEvent } from 'react';\r\nimport { Contact, initialState } from './model';\r\nimport validateContact, {initialErrorState, validForm} from './validate';\r\n\r\ninterface Props {\r\n    currentContact: Contact;\r\n    updateContact: (id:number, contact:Contact) => void;\r\n    toggleModal: () => void;\r\n    mode: string;\r\n    addContact: (contact:Contact) => void;\r\n}\r\n\r\nconst ContactForm = ({currentContact,updateContact,toggleModal,mode, addContact}:Props) => {\r\n    const [contact, setContact] = useState(currentContact);\r\n    const [errors, setErrors] = useState(initialErrorState);\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target as HTMLInputElement;\r\n        setErrors(validateContact(errors, name, value));\r\n\r\n        setContact({ ...contact, [name]: value });\r\n    }\r\n\r\n    const handleSubmit = (event:FormEvent<HTMLFormElement>, id:number, contact:Contact) => {\r\n        event.preventDefault();\r\n        if (!contact.name || !contact.email || !contact.contactNumber) return;\r\n        if (!validForm(errors)) return;\r\n\r\n        if(id === 0){\r\n            addContact(contact);\r\n        }else{\r\n            updateContact(id,contact);\r\n        }\r\n\r\n        setContact(initialState);\r\n        toggleModal();\r\n    }\r\n\r\n    useEffect(() => {\r\n        setContact(currentContact);\r\n        setErrors(initialErrorState);\r\n    }, [currentContact])\r\n\r\n    return (\r\n        <form\r\n            onSubmit={e=>handleSubmit(e,currentContact.id || 0,contact)}\r\n        >\r\n            <label>Name</label>\r\n            <input type=\"text\" name=\"name\" value={contact.name} onChange={handleInputChange} />\r\n            {errors.name.length > 0 && <span className='error'>{errors.name}</span>}\r\n            <label>Email</label>\r\n            <input type=\"email\" name=\"email\" value={contact.email} onChange={handleInputChange} />\r\n            {errors.email.length > 0 && <span className='error'>{errors.email}</span>}\r\n            <label>Contact Number</label>\r\n            <input type=\"text\" name=\"contactNumber\" value={contact.contactNumber} onChange={handleInputChange} /> \r\n            {errors.contactNumber.length > 0 && <span className='error'>{errors.contactNumber}</span>}    \r\n            <button>{mode}</button>\r\n            <button onClick={() => toggleModal()} className=\"button muted-button\">\r\n            Cancel\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ContactForm;","import React, { useState, useEffect } from 'react';\r\nimport { orderBy } from 'lodash';\r\nimport './primitive.css';\r\nimport ContactList from './contacts/list';\r\nimport FormContact from './contacts/form';\r\nimport { Contact, initialState } from './contacts/model';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top: '50%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    marginRight: '-50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '500px'\r\n  }\r\n};\r\ninterface Sort {\r\n  type: \"asc\" | \"desc\";\r\n  field: string;\r\n}\r\n\r\ninterface Meta {\r\n  currentPage: number;\r\n  perPage: number;\r\n  pageNumbers: number[];\r\n}\r\n\r\nconst PER_PAGE = 5;\r\n\r\nconst initialMetaState = (length:number) => {\r\n  const perPage = PER_PAGE;\r\n  const pageNumbers = calculatePageNumbers(length);\r\n  return {\r\n    currentPage: 1,\r\n    perPage,\r\n    pageNumbers\r\n  }\r\n}\r\n\r\nconst calculatePageNumbers = (length:number) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(length / PER_PAGE); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return pageNumbers;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const data: Contact[] = [\r\n    { id: 1, name: 'Tania', email: 'tania@mail.com', contactNumber: '123123123' },\r\n    { id: 2, name: 'Craig', email: 'craig@email.com', contactNumber: '6546456' },\r\n    { id: 3, name: 'Ben1', email: 'ben1@email.com', contactNumber: '2342134' },\r\n    { id: 4, name: 'Ben2', email: 'ben2@email.com', contactNumber: '2342234' },\r\n    { id: 5, name: 'Ben3', email: 'ben3@email.com', contactNumber: '2342334' },\r\n    { id: 6, name: 'Ben4', email: 'ben4@email.com', contactNumber: '2342434' },\r\n    { id: 7, name: 'Ben5', email: 'ben5@email.com', contactNumber: '23425 34' },\r\n  ]\r\n\r\n  const [contacts, setContacts] = useState(data);\r\n  const [list, setList] = useState(data);\r\n  const [sort, setSort] = useState<Sort>({ type: \"asc\", field: \"name\"});\r\n  const [meta, setMeta] = useState<Meta>(initialMetaState(contacts.length));\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const addContact = (contact: Contact) => {\r\n    contact.id = contacts.length + 1;\r\n    setContacts(orderBy([...contacts, contact], [sort.field],[sort.type]));\r\n  }\r\n\r\n  const deleteContact = (id?:number) => {\r\n    setContacts(contacts.filter(contact => contact.id !== id));\r\n  }\r\n\r\n  const sortContacts = (sort: \"desc\" | \"asc\", field: string) => {\r\n    const sortedContacts = orderBy(contacts, [field],[sort]); // Use Lodash to sort array by 'name'\r\n    setContacts(sortedContacts)\r\n  }\r\n\r\n  const [currentContact, setCurrentContact] = useState(initialState)\r\n\r\n  const editContact = (contact:Contact) => {\r\n    setCurrentContact(contact)\r\n  }\r\n  \r\n  const updateContact = (id:number, updatedContact: Contact) => {\r\n    setContacts(contacts.map(contact => (contact.id === id ? updatedContact : contact)))\r\n  }\r\n\r\n  const toggleModal = () => {\r\n    setShowModal(!showModal);\r\n  }\r\n\r\n  const mode = currentContact.id===0 ? 'Add Contact' : 'Edit Contact';\r\n  useEffect(()=>{\r\n    const pageNumbers = calculatePageNumbers(contacts.length);\r\n    let currentPage = meta.currentPage;\r\n    if(pageNumbers[pageNumbers.length - 1] < meta.currentPage){\r\n      currentPage = pageNumbers[pageNumbers.length - 1];\r\n    }\r\n    setMeta({perPage: PER_PAGE, currentPage, pageNumbers})\r\n  }, [contacts.length,meta.currentPage]);\r\n\r\n  useEffect(()=>{\r\n    const metaPage = (meta.currentPage * meta.perPage);\r\n    const beforePage = ((meta.currentPage - 1) * meta.perPage);\r\n    const indexOfLast = metaPage < contacts.length ? meta.currentPage * meta.perPage : contacts.length;\r\n    const lastPage = meta.pageNumbers[meta.pageNumbers.length - 1]\r\n    const indexOfFirst = meta.currentPage === lastPage ? contacts.length - (contacts.length - beforePage) : indexOfLast - meta.perPage;\r\n    setList(contacts.slice(indexOfFirst,indexOfLast))\r\n  },[meta, contacts]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Contacts</h1>\r\n      <div className=\"flex-row\">\r\n        <Modal \r\n           isOpen={showModal}\r\n           style={customStyles}\r\n           contentLabel={mode}\r\n        >\r\n            <h2>{mode}</h2>\r\n            <FormContact\r\n              currentContact={currentContact}\r\n              addContact={addContact}\r\n              updateContact={updateContact} \r\n              toggleModal={toggleModal}\r\n              mode={mode}\r\n            />\r\n        </Modal>\r\n        <div className=\"flex-large\">\r\n          <h2>View Contacts</h2>\r\n          <button onClick={()=>{editContact(initialState);toggleModal()}}>Add Contact</button>\r\n          <ContactList \r\n            contacts={list}\r\n            meta={meta}\r\n            setMeta={setMeta}\r\n            sortContacts={sortContacts}\r\n            editContact={editContact}\r\n            deleteContact={deleteContact}\r\n            sort={sort}\r\n            setSort={setSort}\r\n            toggleModal={toggleModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"names":["_ref","contacts","meta","setMeta","deleteContact","editContact","sortContacts","sort","setSort","toggleModal","SortColumn","field","asc","_jsx","FaSortUp","onClick","type","desc","FaSortDown","individualSort","AllSort","_jsxs","_Fragment","children","renderPageNumbers","pageNumbers","map","number","_objectSpread","currentPage","concat","length","contact","name","email","contactNumber","className","id","colSpan","initialState","initialErrorState","validEmailRegex","RegExp","validateLength","value","errors","test","currentContact","updateContact","mode","addContact","_useState","useState","_useState2","_slicedToArray","setContact","_useState3","_useState4","setErrors","handleInputChange","event","_ref2","target","validateContact","_defineProperty","useEffect","onSubmit","e","preventDefault","validForm","handleSubmit","onChange","Modal","customStyles","content","top","left","right","bottom","marginRight","transform","width","calculatePageNumbers","i","Math","ceil","push","data","setContacts","list","setList","_useState5","_useState6","_useState7","perPage","_useState8","_useState9","_useState10","showModal","setShowModal","_useState11","_useState12","setCurrentContact","metaPage","beforePage","indexOfLast","lastPage","indexOfFirst","slice","isOpen","style","contentLabel","FormContact","orderBy","_toConsumableArray","updatedContact","ContactList","sortedContacts","filter","ReactDOM","document","getElementById","render","React","App"],"sourceRoot":""}