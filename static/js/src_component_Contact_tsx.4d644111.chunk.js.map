{"version":3,"file":"static/js/src_component_Contact_tsx.4d644111.chunk.js","mappings":"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","sources":["component/Contact.tsx","contacts/form.tsx","contacts/list.tsx","contacts/model.ts","contacts/validate.ts"],"sourcesContent":["import { orderBy } from \"lodash\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport FormContact from \"../contacts/form\";\r\nimport ContactList from \"../contacts/list\";\r\nimport { Contact, initialState } from \"../contacts/model\";\r\nimport \"../primitive.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"500px\",\r\n  },\r\n};\r\ninterface Sort {\r\n  type: \"asc\" | \"desc\";\r\n  field: string;\r\n}\r\n\r\ninterface Meta {\r\n  currentPage: number;\r\n  perPage: number;\r\n  pageNumbers: number[];\r\n}\r\n\r\nconst PER_PAGE = 5;\r\n\r\nconst initialMetaState = (length: number) => {\r\n  const perPage = PER_PAGE;\r\n  const pageNumbers = calculatePageNumbers(length);\r\n  return {\r\n    currentPage: 1,\r\n    perPage,\r\n    pageNumbers,\r\n  };\r\n};\r\n\r\nconst calculatePageNumbers = (length: number) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(length / PER_PAGE); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return pageNumbers;\r\n};\r\n\r\nconst ContactComponent: React.FC = () => {\r\n  const data: Contact[] = [\r\n    { id: 1, name: \"Tania\", email: \"tania@mail.com\", contactNumber: \"123123123\" },\r\n    { id: 2, name: \"Craig\", email: \"craig@email.com\", contactNumber: \"6546456\" },\r\n    { id: 3, name: \"Ben1\", email: \"ben1@email.com\", contactNumber: \"2342134\" },\r\n    { id: 4, name: \"Ben2\", email: \"ben2@email.com\", contactNumber: \"2342234\" },\r\n    { id: 5, name: \"Ben3\", email: \"ben3@email.com\", contactNumber: \"2342334\" },\r\n    { id: 6, name: \"Ben4\", email: \"ben4@email.com\", contactNumber: \"2342434\" },\r\n    { id: 7, name: \"Ben5\", email: \"ben5@email.com\", contactNumber: \"23425 34\" },\r\n  ];\r\n\r\n  const [contacts, setContacts] = useState(data);\r\n  const [list, setList] = useState(data);\r\n  const [sort, setSort] = useState<Sort>({ type: \"asc\", field: \"name\" });\r\n  const [meta, setMeta] = useState<Meta>(initialMetaState(contacts.length));\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const addContact = (contact: Contact) => {\r\n    contact.id = contacts.length + 1;\r\n    setContacts(orderBy([...contacts, contact], [sort.field], [sort.type]));\r\n  };\r\n\r\n  const deleteContact = (id?: number) => {\r\n    setContacts(contacts.filter((contact) => contact.id !== id));\r\n  };\r\n\r\n  const sortContacts = (sort: \"desc\" | \"asc\", field: string) => {\r\n    const sortedContacts = orderBy(contacts, [field], [sort]); // Use Lodash to sort array by 'name'\r\n    setContacts(sortedContacts);\r\n  };\r\n\r\n  const [currentContact, setCurrentContact] = useState(initialState);\r\n\r\n  const editContact = (contact: Contact) => {\r\n    setCurrentContact(contact);\r\n  };\r\n\r\n  const updateContact = (id: number, updatedContact: Contact) => {\r\n    setContacts(contacts.map((contact) => (contact.id === id ? updatedContact : contact)));\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const mode = currentContact.id === 0 ? \"Add Contact\" : \"Edit Contact\";\r\n  useEffect(() => {\r\n    const pageNumbers = calculatePageNumbers(contacts.length);\r\n    let currentPage = meta.currentPage;\r\n    if (pageNumbers[pageNumbers.length - 1] < meta.currentPage) {\r\n      currentPage = pageNumbers[pageNumbers.length - 1];\r\n    }\r\n    setMeta({ perPage: PER_PAGE, currentPage, pageNumbers });\r\n  }, [contacts.length, meta.currentPage]);\r\n\r\n  useEffect(() => {\r\n    const metaPage = meta.currentPage * meta.perPage;\r\n    const beforePage = (meta.currentPage - 1) * meta.perPage;\r\n    const indexOfLast = metaPage < contacts.length ? meta.currentPage * meta.perPage : contacts.length;\r\n    const lastPage = meta.pageNumbers[meta.pageNumbers.length - 1];\r\n    const indexOfFirst =\r\n      meta.currentPage === lastPage\r\n        ? contacts.length - (contacts.length - beforePage)\r\n        : indexOfLast - meta.perPage;\r\n    setList(contacts.slice(indexOfFirst, indexOfLast));\r\n  }, [meta, contacts]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Contacts</h1>\r\n      <div className=\"flex-row\">\r\n        <Modal isOpen={showModal} style={customStyles} contentLabel={mode}>\r\n          <h2>{mode}</h2>\r\n          <FormContact\r\n            currentContact={currentContact}\r\n            addContact={addContact}\r\n            updateContact={updateContact}\r\n            toggleModal={toggleModal}\r\n            mode={mode}\r\n          />\r\n        </Modal>\r\n        <div className=\"flex-large\">\r\n          <h2>View Contacts</h2>\r\n          <button\r\n            onClick={() => {\r\n              editContact(initialState);\r\n              toggleModal();\r\n            }}\r\n          >\r\n            Add Contact\r\n          </button>\r\n          <ContactList\r\n            contacts={list}\r\n            meta={meta}\r\n            setMeta={setMeta}\r\n            sortContacts={sortContacts}\r\n            editContact={editContact}\r\n            deleteContact={deleteContact}\r\n            sort={sort}\r\n            setSort={setSort}\r\n            toggleModal={toggleModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactComponent;\r\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\r\nimport { Contact, initialState } from \"./model\";\r\nimport validateContact, { initialErrorState, validForm } from \"./validate\";\r\n\r\ninterface Props {\r\n  currentContact: Contact;\r\n  updateContact: (id: number, contact: Contact) => void;\r\n  toggleModal: () => void;\r\n  mode: string;\r\n  addContact: (contact: Contact) => void;\r\n}\r\n\r\nconst ContactForm = ({ currentContact, updateContact, toggleModal, mode, addContact }: Props) => {\r\n  const [contact, setContact] = useState(currentContact);\r\n  const [errors, setErrors] = useState(initialErrorState);\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setErrors(validateContact(errors, name, value));\r\n\r\n    setContact({ ...contact, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>, id: number, contact: Contact) => {\r\n    event.preventDefault();\r\n    if (!contact.name || !contact.email || !contact.contactNumber) return;\r\n    if (!validForm(errors)) return;\r\n\r\n    if (id === 0) {\r\n      addContact(contact);\r\n    } else {\r\n      updateContact(id, contact);\r\n    }\r\n\r\n    setContact(initialState);\r\n    toggleModal();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setContact(currentContact);\r\n    setErrors(initialErrorState);\r\n  }, [currentContact]);\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e, currentContact.id || 0, contact)}>\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={contact.name} onChange={handleInputChange} />\r\n      {errors.name.length > 0 && <span className=\"error\">{errors.name}</span>}\r\n      <label>Email</label>\r\n      <input type=\"email\" name=\"email\" value={contact.email} onChange={handleInputChange} />\r\n      {errors.email.length > 0 && <span className=\"error\">{errors.email}</span>}\r\n      <label>Contact Number</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"contactNumber\"\r\n        value={contact.contactNumber}\r\n        onChange={handleInputChange}\r\n      />\r\n      {errors.contactNumber.length > 0 && <span className=\"error\">{errors.contactNumber}</span>}\r\n      <button>{mode}</button>\r\n      <button onClick={() => toggleModal()} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport { Contact } from \"./model\";\r\n\r\ninterface Sort {\r\n  type: \"asc\" | \"desc\";\r\n  field: string;\r\n}\r\n\r\ninterface Meta {\r\n  currentPage: number;\r\n  perPage: number;\r\n  pageNumbers: number[];\r\n}\r\n\r\nexport interface Props {\r\n  contacts: Contact[];\r\n  meta: Meta;\r\n  setMeta: (meta: Meta) => void;\r\n  deleteContact: (id?: number) => void;\r\n  editContact: (contact: Contact) => void;\r\n  sortContacts: (sort: \"asc\" | \"desc\", field: string) => void;\r\n  sort: Sort;\r\n  setSort: (sort: Sort) => void;\r\n  toggleModal: () => void;\r\n}\r\n\r\nconst ContactList = ({\r\n  contacts,\r\n  meta,\r\n  setMeta,\r\n  deleteContact,\r\n  editContact,\r\n  sortContacts,\r\n  sort,\r\n  setSort,\r\n  toggleModal,\r\n}: Props) => {\r\n  const SortColumn = (field: string) => {\r\n    const asc = (\r\n      <FaSortUp\r\n        onClick={() => {\r\n          sortContacts(\"asc\", field);\r\n          setSort({ type: \"asc\", field });\r\n        }}\r\n      />\r\n    );\r\n    const desc = (\r\n      <FaSortDown\r\n        onClick={() => {\r\n          sortContacts(\"desc\", field);\r\n          setSort({ type: \"desc\", field });\r\n        }}\r\n      />\r\n    );\r\n    const individualSort = sort.type === \"asc\" ? desc : asc;\r\n\r\n    const AllSort = (\r\n      <>\r\n        {asc} {desc}\r\n      </>\r\n    );\r\n\r\n    return field === sort.field ? individualSort : AllSort;\r\n  };\r\n\r\n  const renderPageNumbers = meta.pageNumbers.map((number) => {\r\n    return (\r\n      <span\r\n        key={number}\r\n        onClick={() => {\r\n          setMeta({ ...meta, currentPage: number });\r\n        }}\r\n      >\r\n        {number}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <span> Current Sort: {`${sort.field} ${sort.type}`}</span>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name{SortColumn(\"name\")}</th>\r\n            <th>Email{SortColumn(\"email\")}</th>\r\n            <th>Contact Number{SortColumn(\"contactNumber\")}</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {contacts.length > 0 ? (\r\n            contacts.map((contact) => (\r\n              <tr key={contact.id}>\r\n                <td>{contact.name}</td>\r\n                <td>{contact.email}</td>\r\n                <td>{contact.contactNumber}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"button muted-button\"\r\n                    onClick={() => {\r\n                      editContact(contact);\r\n                      toggleModal();\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    className=\"button muted-button\"\r\n                    onClick={() => {\r\n                      deleteContact(contact.id);\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={3}>No Contacts</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th>{renderPageNumbers}</th>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","export interface Contact {\r\n    id?: number;\r\n    name: string;\r\n    email: string;\r\n    contactNumber: string;\r\n}\r\n\r\nexport const initialState: Contact = {\r\n    id: 0, name: '', email: '', contactNumber: ''\r\n}\r\n","export interface ContactError {\r\n    name: string;\r\n    email: string;\r\n    contactNumber: string;\r\n}\r\n\r\nexport const initialErrorState: ContactError = {\r\n    name: '', email: '', contactNumber: ''\r\n}\r\n\r\nconst validEmailRegex =\r\n    RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\r\n\r\nconst validateLength = (name: string, value: string, length: number) =>\r\n    value.length < 5 ?\r\n        `${name} must be ${length} characters long!` : ''\r\n\r\nexport const validForm = (errors: ContactError) => {\r\n    return errors.contactNumber === '' && errors.email === '' && errors.name === '';\r\n}\r\n\r\n\r\nconst validate = (errors: ContactError, name: string, value: string) => {\r\n    switch (name) {\r\n        case 'name':\r\n            errors.name =\r\n                validateLength('Name', value, 5);\r\n            break;\r\n        case 'email':\r\n            errors.email =\r\n                validEmailRegex.test(value)\r\n                    ? ''\r\n                    : 'Email is not valid!';\r\n            break;\r\n        case 'contactNumber':\r\n            errors.contactNumber =\r\n                validateLength('Contact Number', value, 4);\r\n            break;\r\n        default:\r\n            break;\r\n\r\n\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport default validate;"],"names":["Modal","customStyles","content","top","left","right","bottom","marginRight","transform","width","calculatePageNumbers","length","pageNumbers","i","Math","ceil","push","data","id","name","email","contactNumber","_useState","useState","_useState2","_slicedToArray","contacts","setContacts","_useState3","_useState4","list","setList","_useState5","type","field","_useState6","sort","setSort","_useState7","currentPage","perPage","_useState8","meta","setMeta","_useState9","_useState10","showModal","setShowModal","_useState11","initialState","_useState12","currentContact","setCurrentContact","editContact","contact","toggleModal","mode","useEffect","metaPage","beforePage","indexOfLast","lastPage","indexOfFirst","slice","_jsxs","className","children","_jsx","isOpen","style","contentLabel","FormContact","addContact","orderBy","concat","_toConsumableArray","updateContact","updatedContact","map","onClick","ContactList","sortContacts","sortedContacts","deleteContact","filter","_ref","setContact","initialErrorState","errors","setErrors","handleInputChange","event","_ref2","target","value","validateContact","_objectSpread","_defineProperty","onSubmit","e","preventDefault","validForm","handleSubmit","onChange","SortColumn","asc","FaSortUp","desc","FaSortDown","individualSort","AllSort","_Fragment","renderPageNumbers","number","colSpan","validEmailRegex","RegExp","validateLength","test"],"sourceRoot":""}