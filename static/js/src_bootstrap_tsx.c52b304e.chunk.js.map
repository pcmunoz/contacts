{"version":3,"file":"static/js/src_bootstrap_tsx.c52b304e.chunk.js","mappings":"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","sources":["contacts/model.ts","contacts/validate.ts","contacts/form.tsx","contacts/list.tsx","component/Contact.tsx","App.tsx","bootstrap.tsx","../node_modules/react-dom/client.js"],"sourcesContent":["export interface Contact {\r\n    id?: number;\r\n    name: string;\r\n    email: string;\r\n    contactNumber: string;\r\n}\r\n\r\nexport const initialState: Contact = {\r\n    id: 0, name: '', email: '', contactNumber: ''\r\n}\r\n","export interface ContactError {\r\n    name: string;\r\n    email: string;\r\n    contactNumber: string;\r\n}\r\n\r\nexport const initialErrorState: ContactError = {\r\n    name: '', email: '', contactNumber: ''\r\n}\r\n\r\nconst validEmailRegex =\r\n    RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\r\n\r\nconst validateLength = (name: string, value: string, length: number) =>\r\n    value.length < 5 ?\r\n        `${name} must be ${length} characters long!` : ''\r\n\r\nexport const validForm = (errors: ContactError) => {\r\n    return errors.contactNumber === '' && errors.email === '' && errors.name === '';\r\n}\r\n\r\n\r\nconst validate = (errors: ContactError, name: string, value: string) => {\r\n    switch (name) {\r\n        case 'name':\r\n            errors.name =\r\n                validateLength('Name', value, 5);\r\n            break;\r\n        case 'email':\r\n            errors.email =\r\n                validEmailRegex.test(value)\r\n                    ? ''\r\n                    : 'Email is not valid!';\r\n            break;\r\n        case 'contactNumber':\r\n            errors.contactNumber =\r\n                validateLength('Contact Number', value, 4);\r\n            break;\r\n        default:\r\n            break;\r\n\r\n\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport default validate;","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\r\nimport { Contact, initialState } from \"./model\";\r\nimport validateContact, { initialErrorState, validForm } from \"./validate\";\r\n\r\ninterface Props {\r\n  currentContact: Contact;\r\n  updateContact: (id: number, contact: Contact) => void;\r\n  toggleModal: () => void;\r\n  mode: string;\r\n  addContact: (contact: Contact) => void;\r\n}\r\n\r\nconst ContactForm = ({ currentContact, updateContact, toggleModal, mode, addContact }: Props) => {\r\n  const [contact, setContact] = useState(currentContact);\r\n  const [errors, setErrors] = useState(initialErrorState);\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setErrors(validateContact(errors, name, value));\r\n\r\n    setContact({ ...contact, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>, id: number, contact: Contact) => {\r\n    event.preventDefault();\r\n    if (!contact.name || !contact.email || !contact.contactNumber) return;\r\n    if (!validForm(errors)) return;\r\n\r\n    if (id === 0) {\r\n      addContact(contact);\r\n    } else {\r\n      updateContact(id, contact);\r\n    }\r\n\r\n    setContact(initialState);\r\n    toggleModal();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setContact(currentContact);\r\n    setErrors(initialErrorState);\r\n  }, [currentContact]);\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e, currentContact.id || 0, contact)}>\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={contact.name} onChange={handleInputChange} />\r\n      {errors.name.length > 0 && <span className=\"error\">{errors.name}</span>}\r\n      <label>Email</label>\r\n      <input type=\"email\" name=\"email\" value={contact.email} onChange={handleInputChange} />\r\n      {errors.email.length > 0 && <span className=\"error\">{errors.email}</span>}\r\n      <label>Contact Number</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"contactNumber\"\r\n        value={contact.contactNumber}\r\n        onChange={handleInputChange}\r\n      />\r\n      {errors.contactNumber.length > 0 && <span className=\"error\">{errors.contactNumber}</span>}\r\n      <button>{mode}</button>\r\n      <button onClick={() => toggleModal()} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport { Contact } from \"./model\";\r\n\r\ninterface Sort {\r\n  type: \"asc\" | \"desc\";\r\n  field: string;\r\n}\r\n\r\ninterface Meta {\r\n  currentPage: number;\r\n  perPage: number;\r\n  pageNumbers: number[];\r\n}\r\n\r\nexport interface Props {\r\n  contacts: Contact[];\r\n  meta: Meta;\r\n  setMeta: (meta: Meta) => void;\r\n  deleteContact: (id?: number) => void;\r\n  editContact: (contact: Contact) => void;\r\n  sortContacts: (sort: \"asc\" | \"desc\", field: string) => void;\r\n  sort: Sort;\r\n  setSort: (sort: Sort) => void;\r\n  toggleModal: () => void;\r\n}\r\n\r\nconst ContactList = ({\r\n  contacts,\r\n  meta,\r\n  setMeta,\r\n  deleteContact,\r\n  editContact,\r\n  sortContacts,\r\n  sort,\r\n  setSort,\r\n  toggleModal,\r\n}: Props) => {\r\n  const SortColumn = (field: string) => {\r\n    const asc = (\r\n      <FaSortUp\r\n        onClick={() => {\r\n          sortContacts(\"asc\", field);\r\n          setSort({ type: \"asc\", field });\r\n        }}\r\n      />\r\n    );\r\n    const desc = (\r\n      <FaSortDown\r\n        onClick={() => {\r\n          sortContacts(\"desc\", field);\r\n          setSort({ type: \"desc\", field });\r\n        }}\r\n      />\r\n    );\r\n    const individualSort = sort.type === \"asc\" ? desc : asc;\r\n\r\n    const AllSort = (\r\n      <>\r\n        {asc} {desc}\r\n      </>\r\n    );\r\n\r\n    return field === sort.field ? individualSort : AllSort;\r\n  };\r\n\r\n  const renderPageNumbers = meta.pageNumbers.map((number) => {\r\n    return (\r\n      <span\r\n        key={number}\r\n        onClick={() => {\r\n          setMeta({ ...meta, currentPage: number });\r\n        }}\r\n      >\r\n        {number}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <span> Current Sort: {`${sort.field} ${sort.type}`}</span>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name{SortColumn(\"name\")}</th>\r\n            <th>Email{SortColumn(\"email\")}</th>\r\n            <th>Contact Number{SortColumn(\"contactNumber\")}</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {contacts.length > 0 ? (\r\n            contacts.map((contact) => (\r\n              <tr key={contact.id}>\r\n                <td>{contact.name}</td>\r\n                <td>{contact.email}</td>\r\n                <td>{contact.contactNumber}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"button muted-button\"\r\n                    onClick={() => {\r\n                      editContact(contact);\r\n                      toggleModal();\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    className=\"button muted-button\"\r\n                    onClick={() => {\r\n                      deleteContact(contact.id);\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={3}>No Contacts</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th>{renderPageNumbers}</th>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { orderBy } from \"lodash\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport FormContact from \"../contacts/form\";\r\nimport ContactList from \"../contacts/list\";\r\nimport { Contact, initialState } from \"../contacts/model\";\r\nimport \"../primitive.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"500px\",\r\n  },\r\n};\r\ninterface Sort {\r\n  type: \"asc\" | \"desc\";\r\n  field: string;\r\n}\r\n\r\ninterface Meta {\r\n  currentPage: number;\r\n  perPage: number;\r\n  pageNumbers: number[];\r\n}\r\n\r\nconst PER_PAGE = 5;\r\n\r\nconst initialMetaState = (length: number) => {\r\n  const perPage = PER_PAGE;\r\n  const pageNumbers = calculatePageNumbers(length);\r\n  return {\r\n    currentPage: 1,\r\n    perPage,\r\n    pageNumbers,\r\n  };\r\n};\r\n\r\nconst calculatePageNumbers = (length: number) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(length / PER_PAGE); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return pageNumbers;\r\n};\r\n\r\nconst ContactComponent: React.FC = () => {\r\n  const data: Contact[] = [\r\n    { id: 1, name: \"Tania\", email: \"tania@mail.com\", contactNumber: \"123123123\" },\r\n    { id: 2, name: \"Craig\", email: \"craig@email.com\", contactNumber: \"6546456\" },\r\n    { id: 3, name: \"Ben1\", email: \"ben1@email.com\", contactNumber: \"2342134\" },\r\n    { id: 4, name: \"Ben2\", email: \"ben2@email.com\", contactNumber: \"2342234\" },\r\n    { id: 5, name: \"Ben3\", email: \"ben3@email.com\", contactNumber: \"2342334\" },\r\n    { id: 6, name: \"Ben4\", email: \"ben4@email.com\", contactNumber: \"2342434\" },\r\n    { id: 7, name: \"Ben5\", email: \"ben5@email.com\", contactNumber: \"23425 34\" },\r\n  ];\r\n\r\n  const [contacts, setContacts] = useState(data);\r\n  const [list, setList] = useState(data);\r\n  const [sort, setSort] = useState<Sort>({ type: \"asc\", field: \"name\" });\r\n  const [meta, setMeta] = useState<Meta>(initialMetaState(contacts.length));\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const addContact = (contact: Contact) => {\r\n    contact.id = contacts.length + 1;\r\n    setContacts(orderBy([...contacts, contact], [sort.field], [sort.type]));\r\n  };\r\n\r\n  const deleteContact = (id?: number) => {\r\n    setContacts(contacts.filter((contact) => contact.id !== id));\r\n  };\r\n\r\n  const sortContacts = (sort: \"desc\" | \"asc\", field: string) => {\r\n    const sortedContacts = orderBy(contacts, [field], [sort]); // Use Lodash to sort array by 'name'\r\n    setContacts(sortedContacts);\r\n  };\r\n\r\n  const [currentContact, setCurrentContact] = useState(initialState);\r\n\r\n  const editContact = (contact: Contact) => {\r\n    setCurrentContact(contact);\r\n  };\r\n\r\n  const updateContact = (id: number, updatedContact: Contact) => {\r\n    setContacts(contacts.map((contact) => (contact.id === id ? updatedContact : contact)));\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const mode = currentContact.id === 0 ? \"Add Contact\" : \"Edit Contact\";\r\n  useEffect(() => {\r\n    const pageNumbers = calculatePageNumbers(contacts.length);\r\n    let currentPage = meta.currentPage;\r\n    if (pageNumbers[pageNumbers.length - 1] < meta.currentPage) {\r\n      currentPage = pageNumbers[pageNumbers.length - 1];\r\n    }\r\n    setMeta({ perPage: PER_PAGE, currentPage, pageNumbers });\r\n  }, [contacts.length, meta.currentPage]);\r\n\r\n  useEffect(() => {\r\n    const metaPage = meta.currentPage * meta.perPage;\r\n    const beforePage = (meta.currentPage - 1) * meta.perPage;\r\n    const indexOfLast = metaPage < contacts.length ? meta.currentPage * meta.perPage : contacts.length;\r\n    const lastPage = meta.pageNumbers[meta.pageNumbers.length - 1];\r\n    const indexOfFirst =\r\n      meta.currentPage === lastPage\r\n        ? contacts.length - (contacts.length - beforePage)\r\n        : indexOfLast - meta.perPage;\r\n    setList(contacts.slice(indexOfFirst, indexOfLast));\r\n  }, [meta, contacts]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Contacts</h1>\r\n      <div className=\"flex-row\">\r\n        <Modal isOpen={showModal} style={customStyles} contentLabel={mode}>\r\n          <h2>{mode}</h2>\r\n          <FormContact\r\n            currentContact={currentContact}\r\n            addContact={addContact}\r\n            updateContact={updateContact}\r\n            toggleModal={toggleModal}\r\n            mode={mode}\r\n          />\r\n        </Modal>\r\n        <div className=\"flex-large\">\r\n          <h2>View Contacts</h2>\r\n          <button\r\n            onClick={() => {\r\n              editContact(initialState);\r\n              toggleModal();\r\n            }}\r\n          >\r\n            Add Contact\r\n          </button>\r\n          <ContactList\r\n            contacts={list}\r\n            meta={meta}\r\n            setMeta={setMeta}\r\n            sortContacts={sortContacts}\r\n            editContact={editContact}\r\n            deleteContact={deleteContact}\r\n            sort={sort}\r\n            setSort={setSort}\r\n            toggleModal={toggleModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactComponent;\r\n","import React from \"react\";\r\nimport Contact from \"./component/Contact\";\r\n\r\nconst App: React.FC = () => {\r\n  return <Contact />;\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["initialState","id","name","email","contactNumber","initialErrorState","validEmailRegex","RegExp","validateLength","value","length","concat","errors","test","_ref","currentContact","updateContact","toggleModal","mode","addContact","_useState","useState","_useState2","_slicedToArray","contact","setContact","_useState3","_useState4","setErrors","handleInputChange","event","_ref2","target","validateContact","_objectSpread","_defineProperty","useEffect","_jsxs","onSubmit","e","preventDefault","validForm","handleSubmit","children","_jsx","type","onChange","className","onClick","contacts","meta","setMeta","deleteContact","editContact","sortContacts","sort","setSort","SortColumn","field","asc","FaSortUp","desc","FaSortDown","individualSort","AllSort","_Fragment","renderPageNumbers","pageNumbers","map","number","currentPage","colSpan","Modal","customStyles","content","top","left","right","bottom","marginRight","transform","width","calculatePageNumbers","i","Math","ceil","push","data","setContacts","list","setList","_useState5","_useState6","_useState7","perPage","_useState8","_useState9","_useState10","showModal","setShowModal","_useState11","_useState12","setCurrentContact","metaPage","beforePage","indexOfLast","lastPage","indexOfFirst","slice","isOpen","style","contentLabel","FormContact","orderBy","_toConsumableArray","updatedContact","ContactList","sortedContacts","filter","Contact","ReactDOM","document","getElementById","render","React","App","m","require","exports","createRoot","hydrateRoot"],"sourceRoot":""}